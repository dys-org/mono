/**
 * Generated by orval v7.0.0 üç∫
 * Do not edit manually.
 * Todo API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/vue-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query';
import { computed, unref } from 'vue';
import type { MaybeRef } from 'vue';

import type { Todo } from './model';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary List all todos
 */
export type getTodosResponse = {
  data: Todo[];
  status: number;
};

export const getGetTodosUrl = () => {
  return `/api/todos`;
};

export const getTodos = async (options?: RequestInit): Promise<getTodosResponse> => {
  const res = await fetch(getGetTodosUrl(), {
    ...options,
    method: 'GET',
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getGetTodosQueryKey = () => {
  return ['api', 'todos'] as const;
};

export const getGetTodosQueryOptions = <
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = Promise<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>>;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = getGetTodosQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodos>>> = ({ signal }) =>
    getTodos({ signal, ...fetchOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTodos>>,
    TError,
    TData
  >;
};

export type GetTodosQueryResult = NonNullable<Awaited<ReturnType<typeof getTodos>>>;
export type GetTodosQueryError = Promise<unknown>;

/**
 * @summary List all todos
 */

export function useGetTodos<
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = Promise<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>>;
  fetch?: RequestInit;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetTodosQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
}

/**
 * @summary Create a new todo
 */
export type postTodosResponse = {
  data: Todo;
  status: number;
};

export const getPostTodosUrl = () => {
  return `/api/todos`;
};

export const postTodos = async (todo: Todo, options?: RequestInit): Promise<postTodosResponse> => {
  const res = await fetch(getPostTodosUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(todo),
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getPostTodosMutationOptions = <
  TError = Promise<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTodos>>,
    TError,
    { data: Todo },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<Awaited<ReturnType<typeof postTodos>>, TError, { data: Todo }, TContext> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTodos>>, { data: Todo }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return postTodos(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostTodosMutationResult = NonNullable<Awaited<ReturnType<typeof postTodos>>>;
export type PostTodosMutationBody = Todo;
export type PostTodosMutationError = Promise<unknown>;

/**
 * @summary Create a new todo
 */
export const usePostTodos = <TError = Promise<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTodos>>,
    TError,
    { data: Todo },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postTodos>>,
  TError,
  { data: Todo },
  TContext
> => {
  const mutationOptions = getPostTodosMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Get a todo by ID
 */
export type getTodosIdResponse = {
  data: Todo;
  status: number;
};

export const getGetTodosIdUrl = (id: number) => {
  return `/api/todos/${id}`;
};

export const getTodosId = async (
  id: number,
  options?: RequestInit,
): Promise<getTodosIdResponse> => {
  const res = await fetch(getGetTodosIdUrl(id), {
    ...options,
    method: 'GET',
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getGetTodosIdQueryKey = (id: MaybeRef<number>) => {
  return ['api', 'todos', id] as const;
};

export const getGetTodosIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getTodosId>>,
  TError = Promise<unknown>,
>(
  id: MaybeRef<number>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodosId>>, TError, TData>>;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = getGetTodosIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodosId>>> = ({ signal }) =>
    getTodosId(unref(id), { signal, ...fetchOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getTodosId>>, TError, TData>;
};

export type GetTodosIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTodosId>>>;
export type GetTodosIdQueryError = Promise<unknown>;

/**
 * @summary Get a todo by ID
 */

export function useGetTodosId<
  TData = Awaited<ReturnType<typeof getTodosId>>,
  TError = Promise<unknown>,
>(
  id: MaybeRef<number>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodosId>>, TError, TData>>;
    fetch?: RequestInit;
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetTodosIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
}

/**
 * @summary Update a todo by ID
 */
export type putTodosIdResponse = {
  data: Todo;
  status: number;
};

export const getPutTodosIdUrl = (id: number) => {
  return `/api/todos/${id}`;
};

export const putTodosId = async (
  id: number,
  todo: Todo,
  options?: RequestInit,
): Promise<putTodosIdResponse> => {
  const res = await fetch(getPutTodosIdUrl(id), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(todo),
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getPutTodosIdMutationOptions = <
  TError = Promise<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putTodosId>>,
    TError,
    { id: number; data: Todo },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putTodosId>>,
  TError,
  { id: number; data: Todo },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putTodosId>>,
    { id: number; data: Todo }
  > = (props) => {
    const { id, data } = props ?? {};

    return putTodosId(id, data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutTodosIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTodosId>>>;
export type PutTodosIdMutationBody = Todo;
export type PutTodosIdMutationError = Promise<unknown>;

/**
 * @summary Update a todo by ID
 */
export const usePutTodosId = <TError = Promise<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putTodosId>>,
    TError,
    { id: number; data: Todo },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putTodosId>>,
  TError,
  { id: number; data: Todo },
  TContext
> => {
  const mutationOptions = getPutTodosIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Delete a todo by ID
 */
export type deleteTodosIdResponse = {
  data: void;
  status: number;
};

export const getDeleteTodosIdUrl = (id: number) => {
  return `/api/todos/${id}`;
};

export const deleteTodosId = async (
  id: number,
  options?: RequestInit,
): Promise<deleteTodosIdResponse> => {
  const res = await fetch(getDeleteTodosIdUrl(id), {
    ...options,
    method: 'DELETE',
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getDeleteTodosIdMutationOptions = <
  TError = Promise<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTodosId>>,
    TError,
    { id: number },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTodosId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTodosId>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {};

    return deleteTodosId(id, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTodosIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTodosId>>>;

export type DeleteTodosIdMutationError = Promise<unknown>;

/**
 * @summary Delete a todo by ID
 */
export const useDeleteTodosId = <TError = Promise<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTodosId>>,
    TError,
    { id: number },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteTodosId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteTodosIdMutationOptions(options);

  return useMutation(mutationOptions);
};
