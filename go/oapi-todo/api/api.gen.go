// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Todo defines model for Todo.
type Todo struct {
	Done bool   `json:"done"`
	Id   int    `json:"id"`
	Text string `json:"text"`
}

// PostTodosJSONRequestBody defines body for PostTodos for application/json ContentType.
type PostTodosJSONRequestBody = Todo

// PutTodosIdJSONRequestBody defines body for PutTodosId for application/json ContentType.
type PutTodosIdJSONRequestBody = Todo

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all todos
	// (GET /todos)
	GetTodos(ctx echo.Context) error
	// Create a new todo
	// (POST /todos)
	PostTodos(ctx echo.Context) error
	// Delete a todo by ID
	// (DELETE /todos/{id})
	DeleteTodosId(ctx echo.Context, id int) error
	// Get a todo by ID
	// (GET /todos/{id})
	GetTodosId(ctx echo.Context, id int) error
	// Update a todo by ID
	// (PUT /todos/{id})
	PutTodosId(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTodos converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodos(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTodos(ctx)
	return err
}

// PostTodos converts echo context to params.
func (w *ServerInterfaceWrapper) PostTodos(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTodos(ctx)
	return err
}

// DeleteTodosId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTodosId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTodosId(ctx, id)
	return err
}

// GetTodosId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodosId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTodosId(ctx, id)
	return err
}

// PutTodosId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTodosId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTodosId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/todos", wrapper.GetTodos)
	router.POST(baseURL+"/todos", wrapper.PostTodos)
	router.DELETE(baseURL+"/todos/:id", wrapper.DeleteTodosId)
	router.GET(baseURL+"/todos/:id", wrapper.GetTodosId)
	router.PUT(baseURL+"/todos/:id", wrapper.PutTodosId)

}

type GetTodosRequestObject struct {
}

type GetTodosResponseObject interface {
	VisitGetTodosResponse(w http.ResponseWriter) error
}

type GetTodos200JSONResponse []Todo

func (response GetTodos200JSONResponse) VisitGetTodosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTodosRequestObject struct {
	Body *PostTodosJSONRequestBody
}

type PostTodosResponseObject interface {
	VisitPostTodosResponse(w http.ResponseWriter) error
}

type PostTodos201JSONResponse Todo

func (response PostTodos201JSONResponse) VisitPostTodosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTodosIdRequestObject struct {
	Id int `json:"id"`
}

type DeleteTodosIdResponseObject interface {
	VisitDeleteTodosIdResponse(w http.ResponseWriter) error
}

type DeleteTodosId204Response struct {
}

func (response DeleteTodosId204Response) VisitDeleteTodosIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetTodosIdRequestObject struct {
	Id int `json:"id"`
}

type GetTodosIdResponseObject interface {
	VisitGetTodosIdResponse(w http.ResponseWriter) error
}

type GetTodosId200JSONResponse Todo

func (response GetTodosId200JSONResponse) VisitGetTodosIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutTodosIdRequestObject struct {
	Id   int `json:"id"`
	Body *PutTodosIdJSONRequestBody
}

type PutTodosIdResponseObject interface {
	VisitPutTodosIdResponse(w http.ResponseWriter) error
}

type PutTodosId200JSONResponse Todo

func (response PutTodosId200JSONResponse) VisitPutTodosIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all todos
	// (GET /todos)
	GetTodos(ctx context.Context, request GetTodosRequestObject) (GetTodosResponseObject, error)
	// Create a new todo
	// (POST /todos)
	PostTodos(ctx context.Context, request PostTodosRequestObject) (PostTodosResponseObject, error)
	// Delete a todo by ID
	// (DELETE /todos/{id})
	DeleteTodosId(ctx context.Context, request DeleteTodosIdRequestObject) (DeleteTodosIdResponseObject, error)
	// Get a todo by ID
	// (GET /todos/{id})
	GetTodosId(ctx context.Context, request GetTodosIdRequestObject) (GetTodosIdResponseObject, error)
	// Update a todo by ID
	// (PUT /todos/{id})
	PutTodosId(ctx context.Context, request PutTodosIdRequestObject) (PutTodosIdResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetTodos operation middleware
func (sh *strictHandler) GetTodos(ctx echo.Context) error {
	var request GetTodosRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTodos(ctx.Request().Context(), request.(GetTodosRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTodos")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTodosResponseObject); ok {
		return validResponse.VisitGetTodosResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTodos operation middleware
func (sh *strictHandler) PostTodos(ctx echo.Context) error {
	var request PostTodosRequestObject

	var body PostTodosJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTodos(ctx.Request().Context(), request.(PostTodosRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTodos")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTodosResponseObject); ok {
		return validResponse.VisitPostTodosResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTodosId operation middleware
func (sh *strictHandler) DeleteTodosId(ctx echo.Context, id int) error {
	var request DeleteTodosIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTodosId(ctx.Request().Context(), request.(DeleteTodosIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTodosId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTodosIdResponseObject); ok {
		return validResponse.VisitDeleteTodosIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTodosId operation middleware
func (sh *strictHandler) GetTodosId(ctx echo.Context, id int) error {
	var request GetTodosIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTodosId(ctx.Request().Context(), request.(GetTodosIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTodosId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTodosIdResponseObject); ok {
		return validResponse.VisitGetTodosIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutTodosId operation middleware
func (sh *strictHandler) PutTodosId(ctx echo.Context, id int) error {
	var request PutTodosIdRequestObject

	request.Id = id

	var body PutTodosIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutTodosId(ctx.Request().Context(), request.(PutTodosIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutTodosId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutTodosIdResponseObject); ok {
		return validResponse.VisitPutTodosIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
